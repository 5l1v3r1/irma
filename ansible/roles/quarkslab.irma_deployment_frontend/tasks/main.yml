---

- set_fact:
    frontend_deployment_dir: "{{ frontend_project_dir }}/{{ 'current' if irma_deployment_code_version == 'local' else 'releases/' + irma_deployment_release_name }}"

- name: Ensure that deployment directory has been created
  file:
    path: "{{ frontend_deployment_dir }}"
    state: directory
  when: irma_deployment_code_version != 'local'

- name: Gather frontend src from current directory
  local_action: shell cd ../frontend && git archive -o ../ansible/playbooks/files/frontend.zip "{{ irma_deployment_code_version }}"
  when: irma_deployment_code_version != 'local'

- name: Deploy frontend src archive
  unarchive:
    src: files/frontend.zip
    dest: "{{ frontend_deployment_dir }}"
  when: irma_deployment_code_version != 'local'

- name: Gather common src from current directory
  local_action: shell cd ../common && git archive -o ../ansible/playbooks/files/common.zip "{{ irma_deployment_code_version }}"
  when: irma_deployment_code_version != 'local'

- name: Remove common symlink
  file:
    path: "{{ frontend_deployment_dir }}/lib"
    state: absent
  when: irma_deployment_code_version != 'local'

- name: Create lib directory
  file:
    path: "{{ frontend_deployment_dir }}/lib"
    state: directory
  when: irma_deployment_code_version != 'local'

- name: Deploy frontend-common src archive
  unarchive:
    src: files/common.zip
    dest: "{{ frontend_deployment_dir }}/lib"
  when: irma_deployment_code_version != 'local'

- name: Install requirements in a Frontend virtualenv
  pip:
    requirements: "{{ frontend_deployment_dir }}/requirements.txt"
    virtualenv: "{{ frontend_deployment_dir }}/venv"
    virtualenv_site_packages: yes
    extra_args: "{{ pip_extra_args | default('') }}"

- name: Copy previous Npm files
  shell: "cp -R {{frontend_install_dir}}/web/node_modules {{frontend_deployment_dir}}/frontend/web/node_modules"
  args:
    removes: "{{frontend_install_dir}}/web/node_modules"
    creates: "{{frontend_deployment_dir}}/web/node_modules"
  # Errors when current does not exists (first deployment)
  ignore_errors: yes

- name: Install NPM dependencies
  npm:
    path: "{{ frontend_deployment_dir }}/web"
    production: "{{ irma_environment == 'production' }}"
    ignore_scripts: yes
    state: latest

- name: Copy previous Bower files
  shell: "cp -R {{frontend_install_dir}}/web/app/components {{frontend_deployment_dir}}/web/app/components"
  args:
    removes: "{{frontend_install_dir}}/web/app/components"
    creates: "{{frontend_deployment_dir}}/web/app/components"
  # Errors when current does not exists (first deployment)
  ignore_errors: yes

- name: Install Bower dependencies
  command: node_modules/.bin/bower install --config.interactive=false
  args:
    chdir: "{{ frontend_deployment_dir }}/web"

- name: Generate Web Frontend
  command: node_modules/.bin/gulp dist
  args:
    chdir: "{{ frontend_deployment_dir }}/web"

- name: Configure config/frontend.ini file
  ini_file:
    dest: "{{ frontend_deployment_dir }}/config/frontend.ini"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items: "{{ frontend_deployment_configs }}"

- name: Create symlink release -> current
  file:
    src: "{{ frontend_deployment_dir }}"
    dest: "{{ frontend_install_dir }}"
    state: link
  when: irma_deployment_code_version != 'local'

- name: Restart Supervisor services
  supervisorctl:
    name: "{{ item.name }}"
    state: restarted
  sudo: yes
  with_items: "{{ supervisor_programs_frontend }}"

- name: Restart Init.d services
  service:
    name: "{{ item }}"
    state: restarted
  sudo: yes
  with_items:
    - nginx
