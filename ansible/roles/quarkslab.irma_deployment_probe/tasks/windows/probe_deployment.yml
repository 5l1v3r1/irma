---

- name: Ensure that releases directory has been created
  win_file:
    path: "{{ probe_deployment_dir }}"
    state: directory
  when: irma_deployment_code_version != 'local'

- name: Gather probe src from current directory
  local_action: shell cd ../probe && git archive -o ansible/playbooks/"{{ irma_deployment_src }}"/probe.zip "{{ irma_deployment_code_version }}"
  when: irma_deployment_code_version != 'local'

- name: Upload probe src archive
  win_unzip:
    src: "{{ irma_deployment_src }}/probe.zip"
    dest: "{{ probe_deployment_dir }}"
  when: irma_deployment_code_version != 'local'

- name: Gather common src from current directory
  local_action: shell cd ../common && git archive -o ../ansible/playbooks/"{{ irma_deployment_src }}"/common.zip "{{ irma_deployment_code_version }}"
  when: irma_deployment_code_version != 'local'

- name: Remove common symlink
  file:
    path: "{{ probe_deployment_dir }}/lib"
    state: absent
  when: irma_deployment_code_version != 'local'

- name: Create lib directory
  file:
    path: "{{ probe_deployment_dir }}/lib"
    state: directory
  when: irma_deployment_code_version != 'local'

- name: Deploy frontend-common src archive
  unarchive:
    src: "{{ irma_deployment_src }}/common.zip"
    dest: "{{ probe_deployment_dir }}/lib"
  when: irma_deployment_code_version != 'local'

- name: Install requirements in a virtualenv
  raw: "{{ item.cmd }}"
  register: result
  failed_when: result.rc not in {{ item.rc | default([0]) }}
  with_items:
    - cmd: python -m virtualenv --system-site-packages "{{ probe_deployment_dir }}/venv"
    - cmd: "{{ probe_deployment_dir }}/venv/Scripts/python.exe -m pip install -r {{ probe_deployment_dir }}/requirements.txt"

- name: Configure config/probe.ini file
  win_ini_file:
    dest: "{{ probe_deployment_dir }}/config/probe.ini"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items: probe_deployment_configs

- name: Create symlink release -> current
  raw: cmd /C '"{{ item.cmd }}"'
  register: result
  failed_when: result.rc not in {{ item.rc | default([0]) }}
  with_items:
    - cmd: rmdir /q /s "{{ probe_install_dir }}"
      rc: [0, 1, 2]
    - cmd: mklink /d "{{ probe_install_dir }}" "{{ probe_deployment_dir }}"
      rc: [0, 2]
  when: irma_deployment_code_version != 'local'

- include: winsrv.yml
  when: "{{ irma_winsrv | default(false) }} == true"

- include: startup.yml
  when: "{{ irma_winsrv | default(false) }} == false"
