"use strict";angular.module("irma",["ngResource","ngSanitize","ngRoute","angularFileUpload"]).constant("constants",{useMocks:!0,fakeDelay:500,baseApi:"/api",speed:1e3}).config(["$routeProvider",function(t){t.when("/selection",{templateUrl:"views/selection.html",controller:"SelectionCtrl",location:"selection"}).when("/upload",{templateUrl:"views/upload.html",controller:"UploadCtrl",location:"upload"}).when("/scan",{templateUrl:"views/scan.html",controller:"ScanCtrl",location:"scan"}).when("/results/:scan",{templateUrl:"views/results.html",controller:"ResultsCtrl",location:"results"}).otherwise({redirectTo:"/selection"})}]),function(){var t=["$scope","$location","alerts","state","config","ScanModel"],s=function(s,e,n,i,a,r){for(var o=0;o<t.length;o++)this[t[o]]=arguments[o];this.init(),this.state.currentScan=new r,s.scan=this.state.currentScan,s.trigger=this.trigger.bind(this),s.goToScan=this.goToScan.bind(this)};s.prototype.init=function(){this.$scope.settings={display:!1,force:!0,probes:[]},this.state.settings=this.$scope.settings,this.config.getProbes().then(function(t){t.probe_list&&0!==t.probe_list.length||(t.probe_list=["Probe1","Probe2","Probe3"]);for(var s=0;s<t.probe_list.length;s++)this.$scope.settings.probes.push({name:t.probe_list[s],active:!0})}.bind(this),function(){this.alerts.add({standard:"probesListError"})}.bind(this))},s.prototype.trigger=function(){this.$scope.scan.uploadFiles().then(function(){this.alerts.add({standard:"uploadStarted"}),this.state.initResults(this.$scope.settings),this.$location.path("/upload")}.bind(this),function(t){this.alerts.add({standard:t})}.bind(this))},s.prototype.goToScan=function(t){this.$location.path("/results/"+t)},s.$inject=t,angular.module("irma").controller("SelectionCtrl",s)}(),function(){var t=["$scope","$location","$timeout","constants","alerts","state","config","ScanModel"],s=function(s,e,n,i){for(var a=0;a<t.length;a++)this[t[a]]=arguments[a];return this.state.currentScan?(s.scan=this.state.currentScan,s.cancel=this.cancelUpload.bind(this),s.$on("uploadComplete",function(t,s){s.status?(this.alerts.add({standard:"uploadComplete"}),this.state.upgradeResults(s.files),n(function(){this.$location.path("/scan")}.bind(this),i.speed)):(this.alerts.add({standard:"errorInUpload"}),this.$location.path("/"))}.bind(this)),void n(function(){this.state.currentScan.uploader.uploadAll()}.bind(this),i.speed)):this.$location.path("/")};s.prototype.cancelUpload=function(){this.state.currentScan.cancelUpload(),this.alerts.add({standard:"uploadCanceled"}),this.$location.path("/")},s.$inject=t,angular.module("irma").controller("UploadCtrl",s)}(),function(){var t=["$scope","$location","$timeout","constants","alerts","state","config","ScanModel"],s=function(s,e,n,i){for(var a=0;a<t.length;a++)this[t[a]]=arguments[a];return this.state.currentScan?(s.scan=this.state.currentScan,s.cancel=this.cancelScan.bind(this),n(function(){this.state.currentScan.launchScan().then(function(){this.alerts.add({standard:"scanStarted"})}.bind(this))}.bind(this),i.speed),void s.$on("scanComplete",function(){this.$location.path("/results/"+this.state.currentScan.id),this.alerts.add({standard:"scanComplete"})}.bind(this))):this.$location.path("/")};s.prototype.cancelScan=function(){this.state.currentScan.cancelScan().finally(function(){this.alerts.add({standard:"scanCanceled"}),this.$location.path("/")}.bind(this))},s.$inject=t,angular.module("irma").controller("ScanCtrl",s)}(),function(){var t=["$scope","$location","$routeParams","alerts","state","config","ScanModel"],s=function(s,e,n,i,a,r,o){for(var c=0;c<t.length;c++)this[t[c]]=arguments[c];this.state.currentScan&&this.state.currentScan.id||(this.alerts.add({standard:"loadingExistingResults"}),this.state.currentScan=new o,this.state.currentScan.id=n.scan),this.state.currentScan.getResults().catch(function(){this.alerts.add({standard:"noScanFound"}),this.$location.path("/")}.bind(this)),s.scan=this.state.currentScan};s.$inject=t,angular.module("irma").controller("ResultsCtrl",s)}(),function(){var t=["alerts"],s=function(t){return{restrict:"E",template:'<div class="alerts"><ul class="list-unstyled"><li class="alert-{{alert.type}}" ng-repeat="alert in alerts" ng-click="dismiss(alert)" ng-bind-html="alert.message"></li></ul></div>',link:function(s){s.alerts=t.list(),s.dismiss=function(s){t.remove(s)}}}};s.$inject=t,angular.module("irma").directive("alerts",s)}(),function(){var t=[],s=function(){return{link:function(t,s){s.click(function(){angular.element("#file-container").click()})}}};s.$inject=t,angular.module("irma").directive("fileTrigger",s)}(),function(){var t=[],s=function(){return{restrict:"A",scope:{state:"=booleanDisplay",color:"@color"},template:"<span class=\"glyphicon glyphicon-{{(state)? 'ok': 'remove'}}\"style=\"color: {{(color)? color: (state)? '#5cb85c': '#d9534f'}}\"></span>"}};s.$inject=t,angular.module("irma").directive("booleanDisplay",s)}(),function(){var t=["$rootScope","$fileUploader","$q","$timeout","constants","scanStore"],s=function(s,e,n,i,a,r){for(var o=0;o<t.length;o++)this[t[o]]=arguments[o];var c=function(){this.id=void 0,this.store=r,this.uploader=e.create(),this.task=null,this.baseResults=null,this.uploader.bind("completeall",this.uploadComplete.bind(this))};return c.prototype.uploadFiles=function(){var t=n.defer();return this.uploader.getNotUploadedItems().length?this.store.getNewId().then(function(s){this.id=s.scan_id,_.each(this.uploader.getNotUploadedItems(),function(t){t.url=this.store.getAddUrl()}.bind(this)),t.resolve(s.scan_id)}.bind(this),function(){t.reject("scanIdRetrievalError")}.bind(this)):t.reject("noFilesToUpload"),t.promise},c.prototype.cancelUpload=function(){this.uploader.cancelAll()},c.prototype.uploadComplete=function(){var t=!0,e={};_.each(this.uploader.queue,function(s){e[s.file.name]={filename:s.file.name},s.isSuccess||(t=!1)}),s.$broadcast("uploadComplete",{status:t,files:e})},c.prototype.launchScan=function(){return this.scanProgress={progress:0,total:0,successful:0,finished:0},this.store.launchScan().then(function(){this.task=i(this.updateScan.bind(this),a.speed)}.bind(this))},c.prototype.cancelScan=function(){return this.task&&i.cancel(this.task),this.store.cancelScan().then(function(){}.bind(this))},c.prototype.updateScan=function(){this.getProgress().then(function(){this.getResults(),this.task=i(this.updateScan.bind(this),a.speed)}.bind(this),function(t){"finished"===t.msg?s.$broadcast("scanComplete"):this.task=i(this.updateScan.bind(this),a.speed)}.bind(this))},c.prototype.getProgress=function(){return this.store.getProgress().then(function(t){this.scanProgress={progress:Math.round(100*t.progress_details.finished/t.progress_details.total),total:t.progress_details.total,successful:t.progress_details.successful,finished:t.progress_details.finished}}.bind(this))},c.prototype.getResults=function(){return this.store.getResults().then(function(t){console.log(t),this.results=this.populateResults(t.scan_results)}.bind(this))},c.prototype.populateResults=function(t){if(!this.baseResults)return t;for(var s in t)t.hasOwnProperty(s)&&(t[s].results=_.extend({},this.baseResults,t[s].results));return t},c};s.$inject=t,angular.module("irma").factory("ScanModel",s)}(),function(){var t=["bridge","state"],s=function(s){for(var e=0;e<t.length;e++)this[t[e]]=arguments[e];this.getNewId=function(){return s.get({url:"/scan/new"})},this.getAddUrl=function(){return s.rootUrl+"/scan/add/"+this.state.currentScan.id},this.launchScan=function(){for(var t=[],e=!1,n=0;n<this.state.settings.probes.length;n++)this.state.settings.probes[n].active?t.push(this.state.settings.probes[n].name):e=!0;var i={};return e&&(i.probe=t.join(",")),this.state.settings.force&&(i.force=!0),s.get({url:"/scan/launch/"+this.state.currentScan.id,payload:i})},this.cancelScan=function(){return s.get({url:"/scan/cancel/"+this.state.currentScan.id})},this.getProgress=function(){return s.get({url:"/scan/progress/"+this.state.currentScan.id})},this.getResults=function(){return s.get({url:"/scan/result/"+this.state.currentScan.id})}};s.$inject=t,angular.module("irma").service("scanStore",s)}(),function(){var t=["$http","$q","alerts"],s=function(s,e){for(var n=0;n<t.length;n++)this[t[n]]=arguments[n];this.rootUrl="http://frontend.irma.qb/_api",this.get=function(t){var n=e.defer();return s.get(this.rootUrl+t.url,{params:t.payload}).then(function(t){0!==t.data.code?n.reject(t.data):n.resolve(t.data)},function(t){this.alerts.add({standard:"apiError"}),n.reject(t.data)}),n.promise},this.post=function(t){var n=e.defer();return s.post(this.rootUrl+t.url,t.payload).then(function(t){n.resolve(t.data)},function(t){this.alerts.add({standard:"apiError"}),n.reject(t.data)}),n.promise}};s.$inject=t,angular.module("irma").service("bridge",s)}(),function(){var t=["$rootScope","$route"],s=function(s){for(var e=0;e<t.length;e++)this[t[e]]=arguments[e];this.location="selection",this.currentScan=void 0,this.settings=void 0,this.baseResults={},this.results={},this.initResults=function(t){if(!this.currentScan)return!1;for(var s=0;s<t.probes.length;s++)t.probes[s].active&&(this.baseResults[t.probes[s].name]={result:"__loading__"});this.currentScan.baseResults=this.baseResults},this.upgradeResults=function(t){for(var s in t)t.hasOwnProperty(s)&&(t[s].results=angular.copy(this.baseResults));this.results=t},s.state=this,s.$on("$routeChangeSuccess",function(t,s){this.location=s.location}.bind(this))};s.$inject=t,angular.module("irma").service("state",s)}(),function(){var t=["$timeout"],s=function(s){for(var e=0;e<t.length;e++)this[t[e]]=arguments[e];this.messages=[],this.map={apiError:{message:"<strong>Error:</strong> Unable to get response from API",type:"danger",dismiss:!1},noFilesToUpload:{message:"<strong>Warning:</strong> There are no files queued for upload",type:"warning",dismiss:5e3},scanIdRetrievalError:{message:"<strong>Error:</strong> An error occured while requesting a new scan id",type:"danger",dismiss:!1},probesListError:{message:"<strong>Error:</strong> Unable to load probes list",type:"danger",dismiss:!1},uploadStarted:{message:"<strong>Info:</strong> Upload has started...",type:"info",dismiss:2e3,status:"debug"},uploadCanceled:{message:"<strong>Warning:</strong> Upload was canceled",type:"warning",dismiss:5e3},errorInUpload:{message:"<strong>Error:</strong> An error occured during upload",type:"danger",dismiss:!1},uploadComplete:{message:"<strong>Info:</strong> The upload was successfull",type:"info",dismiss:2e3,status:"debug"},scanStarted:{message:"<strong>Info:</strong> Scan has started...",type:"info",dismiss:2e3,status:"debug"},scanCanceled:{message:"<strong>Warning:</strong> Scan was canceled",type:"warning",dismiss:5e3},scanComplete:{message:"<strong>Info:</strong> The scan was successfull",type:"info",dismiss:2e3,status:"debug"},loadingExistingResults:{message:"<strong>Info:</strong> Loading an existing scan",type:"info",dismiss:2e3,status:"debug"},noScanFound:{message:"<strong>Warning:</strong> The requested scan does not exist",type:"warning",dismiss:!1}},this.autoDismiss=function(t){(void 0===t.dismiss||t.dismiss!==!1)&&(t.dismiss=t.dismiss!==parseInt(t.dismiss)?4e3:parseInt(t.dismiss),s(function(){this.remove(t)}.bind(this),t.dismiss))},this.add=function(t){t.standard&&this.map[t.standard]&&(t=_.extend(t,this.map[t.standard])),-1===["info","warning","success","danger"].indexOf(t.type)&&(t.type="info"),"debug"!==t.status&&(this.messages.push(t),this.autoDismiss(t))},this.remove=function(t){var s=this.messages.indexOf(t);-1!==s&&this.messages.splice(s,1)},this.list=function(){return this.messages}};s.$inject=t,angular.module("irma").service("alerts",s)}(),function(){var t=["bridge"],s=function(s){for(var e=0;e<t.length;e++)this[t[e]]=arguments[e];this.getProbes=function(){return s.get({url:"/probe/list"})}};s.$inject=t,angular.module("irma").service("config",s)}();