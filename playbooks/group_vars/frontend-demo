---

## Global variables
hostname: frontend.irma

frontend_user: "{{ default_user }}"
frontend_group: "{{ default_group }}"
frontend_project_dir: /opt/irma/irma-frontend

frontend_install_dir: "{{ frontend_project_dir }}/current"
frontend_releases_dir: "{{ frontend_project_dir }}/releases"
frontend_venv_dir: "{{ frontend_install_dir }}/venv"


## Deployment
frontend_deployment_repository: "https://github.com/quarkslab/irma-frontend.git"
frontend_documentation_deployment_repository: "https://github.com/quarkslab/irma.git"
frontend_deployment_configs:
  - section: broker_brain
    option: host
    value: "{{irma_configurations.brain_addr}}"
  - section: broker_brain
    option: vhost
    value: "{{irma_configurations.rabbitmq.brain.vhost}}"
  - section: broker_brain
    option: username
    value: "{{irma_configurations.rabbitmq.brain.user}}"
  - section: broker_brain
    option: password
    value: "{{irma_configurations.rabbitmq.brain.password}}"
  - section: broker_frontend
    option: host
    value: "{{irma_configurations.brain_addr}}"
  - section: broker_frontend
    option: vhost
    value: "{{irma_configurations.rabbitmq.frontend.vhost}}"
  - section: broker_frontend
    option: username
    value: "{{irma_configurations.rabbitmq.frontend.user}}"
  - section: broker_frontend
    option: password
    value: "{{irma_configurations.rabbitmq.frontend.password}}"
  - section: backend_brain
    option: host
    value: "{{irma_configurations.brain_addr}}"
  - section: ftp_brain
    option: host
    value: "{{irma_configurations.brain_addr}}"
  - section: ftp_brain
    option: username
    value: "{{irma_configurations.pureftpd.frontend.username}}"
  - section: ftp_brain
    option: password
    value: "{{irma_configurations.pureftpd.frontend.password}}"
  - section: sqldb
    option: dbms
    value: postgresql
  - section: sqldb
    option: dialect
    value: psycopg2
  - section: sqldb
    option: username
    value: "{{irma_configurations.postgresql.frontend.username}}"
  - section: sqldb
    option: password
    value: "{{irma_configurations.postgresql.frontend.password}}"
  - section: sqldb
    option: dbname
    value: "{{irma_configurations.postgresql.frontend.db_name}}"


## UFW Rules
ufw_additional_rules:
  - port: 80
    rule: allow
  - port: 443
    rule: deny


## HTTPs
frontend_openssl: False


## Apt role
apt_repositories_code_names:
  - '{{ ansible_distribution_release }}'
  - '{{ ansible_distribution_release }}-updates'
  - '{{ ansible_distribution_release }}-backports'


## uWSGI role
uwsgi_install_method: "{{ 'pip' if (default_use_debian_repo | bool) == False else 'repo' }}"
uwsgi_plugins:
  - python


## NodeJS role
nodejs_version: "0.10.30"
nodejs_global_packages:
  - debug


## MongoDB
mongodb_from_mongodb_repo: "{{ not (default_use_debian_repo | bool) }}"


## PostgreSQL role
# Basic settings
postgresql_from_pg_repo: "{{ not (default_use_debian_repo | bool) }}"

postgresql_version: "{{ '9.3' if not default_use_debian_repo|default(False) else '9.1' }}"
postgresql_shared_buffers: "{{ '128MB' if not default_use_debian_repo|default(False) else '24MB' }}"

postgresql_admin_user: "postgres"
postgresql_default_auth_method: "trust"

postgresql_cluster_name: "main"
postgresql_cluster_reset: false

## Databases informations
postgresql_databases:
  - name: irma-frontend

postgresql_users:
  - name: "{{irma_configurations.postgresql.frontend.username}}"
    pass: "{{irma_configurations.postgresql.frontend.password}}"
    encrypted: no

postgresql_user_privileges:
  - name: "{{irma_configurations.postgresql.frontend.username}}"
    db: "{{irma_configurations.postgresql.frontend.db_name}}"
    priv: "ALL"


## Supervisor role
supervisor_programs_frontend:
  - name: frontend_app
    command: "{{ frontend_venv_dir }}/bin/celery worker -A frontend.tasks:frontend_app --hostname=frontend_app.%%h {{default_celery_options}}"
    directory: "{{ frontend_install_dir }}"
    user: "{{ irma_user }}"
    numprocs: 1
    stdout_logfile: /var/log/supervisor/frontend_app.log
    stderr_logfile: /var/log/supervisor/frontend_app.log
    autostart: true
    stopwaitsecs: 600
    killasgroup: true
  - name: frontend_api
    command: >
      uwsgi -s 127.0.0.1:8081 --disable-logging --master --workers 4 --need-app
      --plugins python --chdir {{ frontend_install_dir }} --home {{ frontend_install_dir }}/venv
      --python-path {{ frontend_install_dir }}/venv --mount /api/v1=frontend/api/base.py --lazy
    user: "{{ irma_user }}"
    numprocs: 1
    stdout_logfile: /var/log/supervisor/frontend_api.log
    stderr_logfile: /var/log/supervisor/frontend_api.log
    redirect_stderr: true
    stopsignal: INT
    autostart: true
    stopwaitsecs: 600
    killasgroup: true



## Nginx role
keep_only_specified: True
nginx_configs:
  proxy:
    - proxy_set_header X-Real-IP $remote_addr
    - proxy_set_header Host $http_host
    - proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for
    - proxy_set_header X-NginX-Proxy true
    - proxy_redirect off
    - proxy_http_version 1.1
    - proxy_set_header Upgrade $http_upgrade
    - proxy_set_header Connection "upgrade"
  gzip:
    - gzip on
    - gzip_disable "msie6"
    - gzip_comp_level 6
    - gzip_buffers 16 8k
    - gzip_http_version 1.1
    - gzip_types text/plain text/css application/json application/x-javascript text/javascript application/javascript
  http:
    - types_hash_max_size 2048
    - server_names_hash_bucket_size 64

nginx_sites:
  default:
    - listen 80 default_server
    - listen [::]:80 default_server ipv6only=on
    - server_name _
    - client_max_body_size 100m
    - location ~ /\.ht {
        deny all;
      }
    - location /api/v1 {
        include uwsgi_params;
        rewrite ^/api/v1/(.+) /$1 break;
        uwsgi_pass 127.0.0.1:8081;
      }
    - location /swagger {
        alias {{ frontend_install_dir }}/web/swagger-ui/;
        index index.html;
      }
    - location /docs/frontend/ {
        rewrite ^/docs/frontend/(.+) /$1 break;
        expires -1;
        add_header Pragma "no-cache";
        add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
        root /var/www/prod.project.local/current/docs/_build/html;
        try_files $uri $uri/ /index.html =404;
      }
    - location /docs/brain/ {
        rewrite ^/docs/brain/(.+) /$1 break;
        expires -1;
        add_header Pragma "no-cache";
        add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
        root /opt/irma/irma-brain/current/docs/_build/html;
        try_files $uri $uri/ /index.html =404;
      }
    - location /docs/probe/ {
        rewrite ^/docs/probe/(.+) /$1 break;
        expires -1;
        add_header Pragma "no-cache";
        add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
        root /opt/irma/irma-probe/current/docs/_build/html;
        try_files $uri $uri/ /index.html =404;
      }
    - location / {
        expires -1;
        add_header Pragma "no-cache";
        add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
        root {{ frontend_install_dir }}/web/dist;
        try_files $uri $uri/ /index.html =404;
      }
    - error_log {{ nginx_log_dir }}/{{ hostname }}.error.log
    - access_log {{ nginx_log_dir }}/{{ hostname }}.access.log

# vim: sw=2
